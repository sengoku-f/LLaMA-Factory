[
  {
    "text": "# 组件工具\n## 附件\n单击【附件】按钮工具，单击【增加】可上传组件附件。\n![image-20230706170937438](scripttool.assets/image-20230706170937438.png)\n## 查找窗口\n用于抓取窗口的控件，单击【查找窗口】后，鼠标移动到弹框的![](scripttool.assets/wpsC791.tmp.jpg)，然后长按鼠标左键移动到目标窗口的指定位置后松开鼠标，即可获取到窗口的窗口串信息。\n![image-20230706171434075](scripttool.assets/image-20230706171434075.png)\n## 工具\n![image-20230706171545303](scripttool.assets/image-20230706171545303.png)\n**脚本类型：**组件的脚本类型，支持的类型可以下拉菜单查看。\n**输入模板：**此处可以查看系统常用的一些操作的脚本模版。\n**支持工具：**安装详情可登录《[支持工具部署手册](http://doc.kingsware.cn:8096/public/Uploads/Doc/D04D0AF3E2674A8692DE2D31E543A0DF/index.html)》。\n**查找网页：**用于抓取 IE 网页元素的网页标签和索引串，单击【工具】-查找网页后弹出窗口，将鼠标移动到弹框的![](scripttool.assets/wpsC791.tmp.jpg)，然后长按鼠标左键移动到目标 IE 网页的指定位置后松开鼠标，即可获取到 IE 元素的网页标签和索引串，一般需要操作 IE 浏览器才会使用到此功能。\n**java窗口：**仅抓取 java程序 窗口的句柄信息，使用方法类似于查找窗口工具，不过此功能使用前需要先单击【工具】-【支持工具】-【Java插件】，完成 java 插件的安装后才可正常使用。除此之外，若当前没有 java 程序窗口，也会提示 “未初始化Java环境”。\n**VCL组件：**获取 DelphiVCL 组件信息。\n**MSAA：**用于获取 MSAA 元素信息，当使用基础库函数里 Msaa 分组下的函数时才会使用到该工具。\n![image-20230712163415961](scripttool.assets/image-20230712163415961.png)\n**UIAutomation：**用于获取 UIAutomation 元素信息，当使用基础库函数里 UIAutomation 分组下的函数时才会使用到该工具。\n![image-20230712164114990](scripttool.assets/image-20230712164114990.png)\n**元素选取器：**用于获取 Chrome 浏览器中的元素信息，当使用基础库函数里 Chrome浏览器2.0 分组下的函数时才会使用到该工具。\n> **[warning]  注意**\n>\n> &emsp;使用此工具前需要先安装 Chrome 插件，具体安装步骤可查看《支持工具部署手册》文档下的 “[Chrome插件安装](http://doc.kingsware.cn:8096/public/Uploads/Doc/D04D0AF3E2674A8692DE2D31E543A0DF/%E6%94%AF%E6%8C%81%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/Chrome.html)” 模块。\n![image-20230712165036977](scripttool.assets/image-20230712165036977.png)\n**Selenium选择器：**用于获取 Selenium 元素信息，当使用基础库函数里 Selenium 分组下的函数时才会使用到该工具。\n![image-20230712165900126](scripttool.assets/image-20230712165900126.png)\n**获取颜色：**获取颜色的色号。\n**字符加密：**将字符以 DES 方式进行加密。\n**字符转码：**\n**Ascii查看：**自动生成键盘相应键值的 Ascii 码。\n**ODBC：**设置 ODBC 数据库连接。\n**钩子监视：**获取钩子监视信息。\n**插件检查：**检查插件是否安装成功。\n**打开文件：**选择需要打开的文件，可以在脚本编辑界面展示文件信息。\n**录制脚本：**第一次单击【是】，会进行工具安装，安装完后再次单击可以弹出录制脚本窗口，此功能一般无需使用到。\n**关联流程：**获取当前脚本关联的流程。\n**远程进程：**获取指定远程机器的进程信息。\n**远程窗口：**获取 Windows 代理所在机器的窗口信息。单击“远程窗口”工具，在“选择机器”弹框中选择在线代理后，会跳转到对应机器的 win 32 程序的窗口信息。\n>**[warning]  注意**\n>\n>&emsp;不支持选择 Linux 代理。\n![image-20231207142833482](scripttool.assets/image-20231207142833482.png)\n![image-20231206204656664](scripttool.assets/image-20231206204656664.png)\n**SQL语句转换：**SQL 语句较复杂，有多行而需要转换成系统支持的 SQL 语句时，可以使用此功能进行转换。\n**屏幕截图：**进行屏幕截图操作。\n**组件添加默认模板：**如果新增组件的时候勾选上了“不生成初始模板”，而后打开此组件突然需要添加回来模板时，可以使用此功能。\n**手机界面探测器：**手机端安装了代理端后，可以通过此功能探测手机端的当前界面信息。单击【获取】按钮可以获取手机端当前界面的最新信息。目前支持 IOS 和 Android 两个版本。\n**手机脚本录制：**通过操作手机界面后，自动生成脚本，自动生成脚本后直接就可以正常执行。"
  },
  {
    "text": "### try...except...finally...end语句\n在 try...except...finally...end 语句中，except 块并不是必需的，也就是说可以只有 try...finally...end，表示不捕获异常，异常自动向上传递。其中 finally 一定会执行，要么在 try 执行完毕后执行，要么在 except 执行完毕后执行。\n如下图示例中，在读取操作文件或数据库时，一般都需要释放对象，通常将释放语句放在 finally 中，从而避免发生异常而无法释放对象的情况发生。\n![image-20230704172243667](unusual.assets/image-20230704172243667.png)"
  },
  {
    "text": "## 异常处理\n程序如何处理意料之外的错误呢？例如：在读取文件期间，计算机上的其他程序将文件删除，那么结果将会如何？为了应对这类意料之外的错误，中文脚本和其他语言一样，采取的措施是引发异常处理机制。异常处理机制可以捕获、检查错误，并决定如何处理错误。异常处理机制可能根据异常发生的时机改变程序的控制流程，从而导致执行流程跳出函数或进入处理错误的代码块。\n当程序发生异常时，可以做如下两种选择：\n1. 忽略异常，使得程序崩溃并显示堆栈跟踪。这种方法可以提供调试信息，对于程序开发非常有帮助。\n2. 捕获异常，并打印友好的错误信息直至修复问题。对于非程序员使用程序时，一般使用这种方法。\n### try...except...end语句\ntry...except...end 语句的工作原理与 if 语句类似，不同的是：if 语句根据布尔表达式的结果决定程序的执行，而 try...except...end 语句根据是否出现异常来判断程序的执行。\n中文脚本中可使用```获取异常信息(ExceptionType, ExceptionParam)```来捕获程序抛出的异常，如下图示例所示，如果输入的除数为0，函数将引发```divide by zero```异常，进而跳转到 except 代码块并打印错误信息。\n- 当 try 中的代码出现异常，将跳过 try 代码块内其他未执行的语句，转而执行 except 代码块内的语句；\n- 如果 try 中的代码块没有出现异常，则跳过 except 代码块内的语句。\n  ![image-20230704170934750](abnormal.assets/image-20230704170934750.png)"
  },
  {
    "text": "## 运算符与表达式\n### 运算符\n运算符是一种功能符号，可以用于进行各种数据之间的运算，常用运算符包括：\n- [算数运算符](#Arithmetic)\n- [比较运算符](#Compare)\n- [逻辑运算符](#Logic)\n#### 算数运算符\n用于完成基本的数学运算，包括加、减、乘、除等。\n| 运算符 | 含义       | 示例    |\n| ------ | ---------- | ------- |\n| +      | 加法运算   | X + Y   |\n| -      | 减法运算   | X – Y   |\n| *      | 乘法运算   | X * Y   |\n| /      | 除法运算   | X / Y   |\n| Div    | 整除运算   | X Div Y |\n| Mod    | 取余数运算 | X MOD Y |\n#### 比较运算符\n可以使用下列运算符比较两个值。\n| 运算符 | 含义     | 示例   |\n| ------ | -------- | ------ |\n| >      | 大于     | X > Y  |\n| <      | 小于     | X < Y  |\n| >=     | 大于等于 | X >= Y |\n| <=     | 小于等于 | X <= Y |\n|  Y |\n#### 逻辑运算符\n基本的逻辑运算包括与、或、非三种符号，类似于表示日常交流中的“并且”，“或者”，“除非”等思想。\n| 运算符 | 含义   | 示例                |\n| ------ | ------ | ------------------- |\n| And    | 与运算 | (X > 1) and (Y > 1) |\n| Or     | 或运算 | (X > 1) or (Y > 1)  |\n| Not    | 非运算 | Not (X = 0)         |\n### 表达式\n表达式是由变量、常量、函数等通过一个或多个运算符组合而成的式子，表达式中的变量、常量、函数等是运算符的运算对象，称为操作数，如下图所示：\n![image-20230704170703252](expression.assets/image-20230704170703252.png)"
  },
  {
    "text": "# 语法基础\n## 常量与变量\n- 常量：常量为固定值，即程序执行过程中不可改变的数据，如中文脚本组件中的```False = 0```是不变的。\n- 变量：变量，即程序执行过程中可变的数据，是最重要的编程概念之一。中文脚本中可以定义变量并指向一个值，并且当程序运行过程中遇到变量时，中文脚本将变量替换成其所指向的值。\n  如下截图中语句```Name = ‘张三’```被称为赋值语句，其中 Name 是一个变量名，“=” 被称为赋值运算符，用于将变量指向一个值，在本例中变量指向字符串 ‘张三’。\n  ![image-20230703200328991](elements.assets/image-20230703200328991.png)"
  },
  {
    "text": "## 数据类型转换\n在中文脚本组件编写的过程中，类型转换是一种常见的操作，因此中文脚本中提供了简化这种操作的内置基础函数，具体包含以下几种函数:\n- 将整数转换为字符串：```整数转字符()```\n- 将字符串转换为整数：```字符转整数()```\n- 将浮点数转换为字符串：```浮点数转字符()```\n- 将字符串转换为浮点数：```字符转浮点数()```\n- 将浮点数转换为整数(四舍五入)：```Round()```\n- 将浮点数转换为整数(向上取整)：```Ceil()```\n  ![image-20230704163709833](convert.assets/image-20230704163709833.png)\n  脚本例子：\n  ```\n  {$I 输入模板.run}\n  数据类型转换()\n  {$I 帮助信息.run}\n  {$I 参数定义.run}\n  {$I 返回定义.run}\n  {$I 函数主体.run}\n  //将整型转换为字符串\n  字符1 = 整数转字符(789)\n  Trace(字符1)\n  //将字符串转换为整数\n  整数1 = 字符转整数('666')\n  Trace(inttostr(整数1))\n  //将浮点数转换为字符串\n  字符2 = 浮点数转字符(-3.14)\n  Trace(字符2)\n  //将字符串转换为浮点数\n  浮点数 = 字符转浮点数('8.901')\n  print(浮点数)\n  //将浮点数转换为整数（四舍五入）\n  整数2 = Round(10.2)\n  print(整数2)\n  //将浮点数转换为整数（向上取整）\n  整数3 = Ceil(8.23)\n  print(整数3)\n  返回 = 设置指标('正常', '', '')\n  Trace(返回)\n  {$I 调试开始.run}\n  调用组件()\n  {$I 调试结束.run}\n  ```"
  },
  {
    "text": "## 代理端（Agent）安装\n确保 Server 已成功启动的情况下，打开浏览器，登录网址：http://服务器IP:端口/index.html 下载代理端 Robot（Agent） 程序，如下图所示。\n> **[info]  提示**  \n> 服务器 IP ：Server 安装在本地，则可直接使用 127.0.0.1 地址，否则需要使用实际 IP 。\n![image-20241028163129864](agent.assets/image-20241028163129864.png)\n拷贝至安装目录，如：“D：/krpa/Robot/Robot.exe”，双击运行。\n> **[warning]  注意**\n> ![](agent.assets/1669364391948.jpg) 为旧版本 Agent 图标，新版本图标为 ![](agent.assets/1690422006934.jpg)，未连接 Server 状态下图标为 ![](agent.assets/1690420691014.jpg)。\n程序界面默认最小化至托盘，出现 ![1669363457455](agent.assets/1669363457455.jpg) 这种状态，说明当前 Robot 未连接至 Server 服务器，需要配置 Server 所在的 IP 和端口。右键 ![1669363457455](agent.assets/1669363457455.jpg) 图标，选择“配置信息”，在弹出窗口中完成配置，如下图所示。\n![image-20221125161058800](agent.assets/image-20221125161058800.png)\n![image-20221125161140619](agent.assets/image-20221125161140619.png)\n配置说明：\n-  服务器地址：Server 服务器所在的 IP 地址。\n-  服务器端口：Server 服务器对外开放的端口。\n-  最大线程数：当前 RPA 机器人允许的最大工作线程数，默认为50。\n-  其他选项默认即可。\n设置完成后，单击“确定”。若托盘图标变成 ![1669364391948](agent.assets/1669364391948.jpg) ，则说明当前 RPA 机器人已设置成功，此时双击 ![1669364391948](agent.assets/1669364391948.jpg) 图标，弹出 Robot 程序界面，可查看到右下角显示“连接成功”，如下图所示。\n![image-20221125162617202](agent.assets/image-20221125162617202.png)"
  },
  {
    "text": "# 安装配置\n本章节主要介绍如何在 Windows 平台上安装配置 K-RPA 系统。\n- 服务器（Server）： K-RPA 系统的服务器，在使用K-RPA 系统前，必须先安装 Server。\n- 控制端（Control）： K-RPA 系统的控制台。\n- 代理端（Agent）：K-RPA 系统的 机器人（代理端）。\n- 网页版（Web）：K-RPA 系统的网页版控制台。\n> **[info]  备注**\n>\n> - K-RPA 系统遵循绿色软件理念，无需安装过程，单个文件直接拷贝即可使用，部署方便，快捷简单，支持批量升级。\n> - K-RPA 系统除支持在 Windows 平台上安装部署外，还支持在 Linux 和信创平台上进行安装部署。\n## 服务器（Server）安装\n“Server.exe” 应用程序获取：\n- 内部人员：登录产品下载中心网址下载。\n- 外部人员：由金智维项目人员或者售后人员提供 。\n> **[info]  说明**\n>\n> &emsp;产品下载中心网址仅金智维内部人员可访问，若是外部人员需要使用相应文件，可联系金智维项目/售后人员提供。\n将“Server.exe” 应用程序拷贝至安装目录，如： “D：/krpa/Server/Server.exe” 。双击运行 “Server.exe” ，打开主界面，如下图所示。\n> **[warning]  注意**\n>\n> &emsp;![](install.assets/1669366217173.jpg) 为旧版本 Server 图标，新版本图标已更新为 ![](install.assets/1690420242991-1690856086148.jpg)。\n![image-20221125143608308](install.assets/image-20221125143608308.png)\n单击“配置”，弹出 Server 服务器“配置”窗口，如下图所示。\n![image-20221125141616222](install.assets/image-20221125141616222.png)\n配置说明：\n- 名称：Server 描述，自定义即可。\n- 端口：Server 对外的服务端口，建议12580，也可自定义。 Robot 可以通过此端口与 Server 建立 Socket 连接。端口开通的方向是： Robot 往 Server 方向。\n- 自动打开“下载页面”：勾上此选项，在 Server 启动时会自动弹出 Robot 的下载页面和安装操作说明。\n- 开机时自动启动：勾上此选项，Server 会随机器一同启动。\n- 其他选项无需设置，默认即可。\n设置完成后，单击“确定”，回到 Server 服务器开启界面。\n![image-20221125143653900](install.assets/image-20221125143653900.png)\n单击“开始/继续(S)”，弹出“授权信息”窗口，将“机器标识”字符串拷贝并发送至金智维厂商，如下图所示。\n![image-20221125143826716](install.assets/image-20221125143826716.png)\n> **[warning]  注意**  \n>\n> - 首次安装或者授权文件已失效才需要进行授权申请。\n> - 若需要使用网页版，则在申请授权时需要备注说明支持网页版。\n待金智维厂商收到机器标识后，会返回一个后缀名为 “.lnc” 的授权文件，此时将授权文件导入即可，如下图所示。\n![image-20221125151312524](install.assets/image-20221125151312524.png)\n单击“确定”，若 Server 程序最小化到托盘，双击 ![1669366217173](install.assets/1669366217173.jpg) 图标即可打开主界面，待启动按钮状态变成灰色即表示 Server 已启动成功，如下图所示。\n![image-20221125151759746](install.assets/image-20221125151759746.png)"
  },
  {
    "text": "## 网页版（Web）安装\n “web.dat” 文件获取：\n- 内部人员：登录产品下载中心网址下载。\n- 外部人员：由金智维项目人员或者售后人员提供 。\n> **[info]  说明**\n>\n> &emsp;产品下载中心网址仅金智维内部人员可访问，若是外部人员需要使用相应文件，可联系金智维项目/售后人员提供。\n将 “web.dat” 文件放到 “Server.exe” 同目录下，双击  “Server.exe” 启动 Server 服务器。\n> **[warning]  注意**  \n>\n>  &emsp;若当前 Server 已启动，则需要在托盘右键 ![1669366217173](web.assets/1669366217173.jpg) 图标退出 Server，再重启 。\n打开浏览器，登录网址：http://服务器IP:端口/web/login.html 。\n> **[info]  提示**  \n>\n>  &emsp;服务器 IP ：Server 安装在本地，则可直接使用 127.0.0.1 地址，否则需要使用实际 IP 。\n![image-20221125172526007](web.assets/image-20221125172526007.png)\n输入初始化用户名和密码，单击登录可成功进入系统首页，如下图所示。\n> **[info]  提示**  \n>\n> - 初始化用户 ：admin  \n> - 初始化密码：1\n![image-20221125172851173](web.assets/image-20221125172851173.png)\n单击左侧 ![1669368597468](web.assets/1669368597468.jpg) 图标，可展示系统菜单模块。\n![image-20221125173151575](web.assets/image-20221125173151575.png)"
  },
  {
    "text": "## 控制端（Control）安装\n当 Server 安装成功后，可进一步安装 Control ，具体安装步骤如下:\n1. 启动服务器 Server 后，登录网址：http://服务器IP:端口/index.html ，即启动服务器后自动打开的网页，单击控制台后方的【下载】按钮下载控制台（Control ）程序，并把程序存放到指定目录下，此处建议存放到 “Control” 目录下。\n   > **[info]  说明**\n   >\n   > - 若是启用了第三方杀毒软件，则下载时请把下载文件设置为安全文件，否则文件会被移除。\n   > - 服务器 IP ：Server 安装在本地，则可直接使用 127.0.0.1 地址，否则需要使用实际 IP 。\n   ![image-20241028162534709](control.assets/image-20241028162534709.png)\n   ![image-20220506120038455](control.assets/image-20220506120038455.png)\n2. 双击 “Control.exe” 启动控制台，打开控制台登录页面，单击“服务器地址”处将 IP 和端口设置成 Server 所在的 IP 地址和端口，设置成功后，输入初始化用户名和密码。\n   > **[info]  提示**\n   >\n   > - 初始化用户：admin\n   > - 初始化密码：1\n   ![image-20230615094352885](control.assets/image-20230615094352885.png)\n3. 单击登录进入系统首页，若右下角显示“连接成功”，则表示 Control 已成功连接 Server 服务器，如下图所示。\n   ![image-20230615094155002](control.assets/image-20230615094155002.png)"
  },
  {
    "text": "## 编写规范\n为了提高脚本的可读性和编写效率，减少错误的发生，特制定如下的[编写规范要求](#require)和[注意事项](#warning)。\n### 编写规范要求\n![image-20231017101814220](specification.assets/image-20231017101814220.png)\n**序号内容说明：**\n> **[info]  提示**\n>\n> - 关于缩进：[Ctrl +Shift +I] 可将选中代码块右移两格，[Ctrl +Shift +U] 可将选中代码块左移两格。\n> - 关于注释：`//`可注释单行代码，`{}`可注释多行代码，[Ctrl +/] 可将选中的一行或多行代码内容注释。\n① 不同的代码层次之间用两个空格进行缩进。\n② 表达式应对齐显示，运算符前后用一个空格隔开。\n③ 各代码段之间用空行分隔，避免全部代码混在一起。\n④ 代码按段落书写注释，标明整段代码的作用，段内需要说明的话可在该行代码的上一行或者在同行的末尾增加注释。\n### 注意事项\n在执行脚本组件时需注意：\n- 循环应注意退出，若循环没有退出则有可能出现死循环的情况，导致机器卡死和资源占用。\n- 执行每一步操作后应判断结果再继续执行，避免执行过程中出现问题而继续执行的情况发生。\n- 脚本中创建资源应及时释放，避免资源的占用。\n- 开启程序前应判断程序是否启动，关闭程序后应判断程序是否关闭。\n- 每一个关键步骤应设置截图，有报错的地方必须提供截图信息。\n- 若脚本执行时间较长，则每一步骤应设置提示信息，方便查看脚本执行的进度。\n- 注意检查变量的使用情况，避免用错变量的情况发生。"
  },
  {
    "text": "## 组件示例\n本章节将介绍如何开发一个完整的中文脚本组件，包括组件的编写、调试、运行和保存审核。\n### 场景：获取指定目录下的文件数量\n1. 创建组件。\n   - 单击左侧菜单栏【脚本管理】-单击【组件管理】进入组件管理界面。\n   - 单击【增加】按钮，在下拉菜单中单击【增加分组】新增一个名为 “demo” 的分组。\n   - 选中新增的 “demo” 分组，单击【增加】按钮，在下拉菜单中单击【增加组件】新增一个名为 “test”，组件类型为“中文脚本”的组件。\n   ![image-20230616110715441](example.assets/image-20230616110715441.png)\n2. 编写组件。\n   进入中文脚本组件界面后，编写脚本内容。\n   > **[info]  快捷键说明**\n   >\n   > [Ctrl + F]：组件编辑搜索\n   >\n   > [Ctrl + A]：组件编辑全选\n   >\n   > [Ctrl + C]：组件编辑复制\n   >\n   > [Ctrl + V]：组件编辑粘贴\n   >\n   > [Ctrl + Shift + ~]：组件编辑五笔输入法切换\n   >\n   > [Ctrl + Shift + (1到9)]：组件编辑设置定位，再次使用快捷键可取消设置定位。\n   >\n   > [Ctrl + (1到9)]：组件编辑切换定位\n   ![image-20230703194459501](example.assets/image-20230703194459501.png)\n   **序号内容说明：**\n   ① “test”为中文脚本组件的名称，“文件目录”为中文脚本组件的入参名称。\n   ② 定义“文件目录”参数的数据类型为字符串。\n   ③ 使用```文件数量()```函数可获取指定文件目录下的文件数量，在查找到`文件数量()`函数后，单击函数后方的“查看”按钮，如下图所示，可看到函数的帮助信息。\n   > **[info]  提示**\n   >\n   > &emsp;在编写中文脚本组件内容时，可参考本文档里的“[编写规范](http://localhost:4000/%E4%B8%AD%E6%96%87%E8%84%9A%E6%9C%AC%E7%BB%84%E4%BB%B6/specification.html)”模块。\n   ![image-20230710160549868](example.assets/image-20230710160549868.png)\n   ④ 括号内填写文件目录的参数值，即文件实际路径，该参数值仅在调试测试时生效。由于“文件目录“参数定义为字符串类型，因此此处填写的参数值需要使用英文单引号引用。\n   > **[info]  说明**\n   >\n   > &emsp;仅参数的数据类型定义为字符串类型时，参数值才需要使用英文单引号引用。\n   脚本例子：\n   ```\n   {$I 输入模板.run}\n   test(文件目录)\n   {$I 帮助信息.run}\n   {$I 参数定义.run}\n   文件目录:字符串\n   {$I 返回定义.run}\n   返回:字符串\n   {$I 函数主体.run}  \n   //获取文件夹下文件的数量\n   数量 = 文件数量(文件目录)\n   trace(inttostr(数量))\n   if (数量 = 0)\n   [\n     返回 = 设置指标('严重', '获取失败', '')\n     Trace(返回)\n     exit\n   ] else\n   [\n     返回 = 设置指标('严重', '获取成功', '')\n     Trace(返回)\n   ]\n   {$I 调试开始.run}\n   调用组件('D:\\vsatTest')\n   {$I 调试结束.run}\n   ```\n3. 编写好脚本内容，单击【保存】后，单击【运行】-【编译】进行组件调试。\n   > **[info]  快捷键说明**\n   >\n   > F5：组件编辑断点F7：组件编辑跳入F8：组件编辑下一步F9：组件编辑运行[Ctrl + F2]：组件编辑重置[Ctrl + F9]：组件编辑编译[Ctrl + S]：组件编辑保存\n   ![image-20230703195307323](example.assets/image-20230703195307323.png)\n4. 编译通过后，单击【运行】-【运行】进行组件的运行，运行成功后，在运行消息界面可以看到组件运行结果。\n   ![image-20230703195651286](example.assets/image-20230703195651286.png)\n   ![image-20230616163751122](example.assets/image-20230616163751122.png)\n5. 执行成功后，保存并审核脚本即可被流程调用。\n   ![image-20230703195858327](example.assets/image-20230703195858327.png)"
  },
  {
    "text": "## 帮助信息\n在编写中文脚本组件```{$I 函数主体.run}```时：\n- 可在组件左侧【基础库】分组下直接查找函数。\n- 也可在左侧搜索框中直接搜索函数名称（支持关键字搜索函数）来查找。\n  ![image-20230703193015100](help.assets/image-20230703193015100.png)\n找到函数后，单击函数后方【查看】按钮，可查看当前函数的使用帮助信息和具体的脚本例子。\n> **[info]  函数使用说明**\n>\n> - 鼠标光标定位至系统中文函数：显示中文函数帮助信息，若为自定义函数，则显示：“此函数暂无帮助信息。”\n> - 查看函数的帮助信息时，可直接复制脚本例子到脚本编辑界面中修改使用。\n> - 将鼠标光标放到脚本编辑界面指定位置后，双击函数可将其写入到指定位置。\n> - 【Ctrl + 单击】：选中函数后按【Ctrl + 单击】，可进入该函数窗口，查看函数详情。\n> - 【Alt + /】：编写中文脚本时，在编辑框输入关键字后按【Alt + /】，可模糊匹配中文系统函数。例如：在中文脚本组件界面中输入“运行”后，使用快捷键【Alt + /】，可弹出中文脚本组件中所有包含“运行”关键字的函数。\n>   - 选择函数方式：弹出模糊匹配的函数后，可通过双击和按 【Enter】方式选择目标函数。\n>   - 关闭提示方式：选择完目标函数或者按【Esc】，即可关闭提示。\n![image-20230616151828537](help.assets/image-20230616151828537.png)"
  },
  {
    "text": "# 中文脚本组件\n## 组件介绍\n组件是具备某特定功能的脚本，是具体场景实现中抽象出来的“功能零件”，类似于程序设计里的函数。而中文脚本组件是其中一种组件类型，具有组件的所有功能，具体如下：\n- 组件是流程的组成部分，作为流程的一个单独节点。\n- 组件是具体场景实现中的一个特定功能，比如银行流水下载场景中，网银账户登录、进入对应菜单查询并下载流水、关闭浏览器等均可抽象为一个组件。\n- 组件实现脚本多流程、多场景的重用，比如网银账户登录组件，可用于银行流水下载流程，也可用于网银账号余额查询流程，亦可用于银行回单下载流程等等。\n- 组件跟普通程序的设计类似，支持互相调用，满足多代码块的重用需要。"
  },
  {
    "text": "## 组件创建\n创建一个中文脚本组件的具体步骤如下：\n1. 进入“组件管理”。\n   单击左侧菜单栏【脚本管理】-单击【组件管理】进入组件管理界面。\n   ![image-20230616105406120](create.assets/image-20230616105406120.png)\n2. 新增组件分组。\n   单击【增加】按钮，在下拉菜单中单击【增加分组】新增一个名为 “demo” 的分组。\n   ![image-20230616105935926](create.assets/image-20230616105935926.png)\n3. 新增中文脚本组件\n   选中新增的 “demo” 分组，单击【增加】按钮，在下拉菜单中单击【增加组件】新增一个名为 “test”，组件类型为“中文脚本”的组件。\n   ![image-20230616110715441](create.assets/image-20230616110715441.png)\n4. 成功创建中文脚本组件。\n   新增一个中文脚本组件成功后，创建的组件界面如下所示：\n   ![image-20230710144631944](create.assets/image-20230710144631944.png)"
  },
  {
    "text": "## 编码结构\n创建好一个中文脚本组件后，进入组件界面如下图所示，以下根据组件模板介绍中文脚本组件的编码结构。\n![image-20231017114429357](codestructure.assets/image-20231017114429357.png)\n**序号内容说明：**\n① 填入组件名称及入参名称。若有入参，则在英文括号内填写入参名称，传入多个参数时用英文逗号隔开。格式：```组件名称(参数1,参数2，...)```；若无入参，则英文括号内容为空。格式：```组件名称()```。\n② 对入参进行数据类型定义，格式为：```参数名:参数类型```。其中```:```为英文冒号，支持的参数类型有：字符串、整型、 浮点数和布尔型。 若无入参，则此处空行即可；若传入多个参数，则各参数需换行隔开。\n格式为：\n```\n参数1:字符串\n参数2:整型\n参数3:浮点数\n参数4:布尔型\n```\n③ 组件有返回值，需要在其下方定义返回值类型，可直接输出返回值内容，也可将输出返回值运用于其他组件中。若是需要输出多个返回值，则各参数换行隔开即可。一般默认填写```返回:字符串```即可，其中```:```为英文冒号。\n④ 填写具体脚本内容。\n> **[info]  编写提示使用说明：**\n>\n> - 折叠/展开\n>   - 单击中括号左侧 “-” 按钮可折叠隐藏中括号内所有内容、右中括号及其所在行内容。\n>   - 单击中括号左侧 “+” 或 “...” 按钮可展开显示中括号内所有内容、右中括号及其所在行内容。\n>   - [ Ctrl +} ]可快捷折叠中括号，[ Ctrl +Shift +} ]可快捷展开中括号。\n> - 高亮\n>   \n>   - 单击中括号前后位置，中括号符号高亮显示。\n>   \n>     ![image-20231017115739958](codestructure.assets/image-20231017115739958.png)\n>   \n>   - 双击参数或变量名时，同名的所有参数或变量会高亮显示。\n>   \n>     ![image-20240124181740383](codestructure.assets/image-20240124181740383.png)\n>   \n>     ![image-20240124181800028](codestructure.assets/image-20240124181800028.png)\n>\n⑤ 若有入参，则需在```调用组件()```处传递对应数量的入参值，传递多个入参值时，需用英文逗号隔开，格式为：```调用组件（'字符串参数值',整型参数值,浮点数参数值,布尔型参数值）```；若无入参，则为空即可，格式为：```调用组件()```。"
  },
  {
    "text": "# 流程\n## 基础知识\n### 流程设计原则\n流程是 RPA 的核心，一个流程通常对应一个场景任务的自动化实现。 \n流程设计相当于加工厂，可以把多个跟场景相关的功能组件，通过一定的逻辑与顺序连起来，加上参数信息，形成流程。\n流程设计的原则：\n1. 一个流程必须至少包含“开始”和“结束”节点。\n2. 流程连接线必须有闭环，即流程节点应该直接或者间接（通过其他节点）与“开始”和“结束”节点相连。\n3. 流程连接线可设置条件，但必须结合流程节点的执行返回使用。\n4. 一个流程可被另一个流程直接引用，支持无限多层引用。\n5. 一个流程可直接嵌套子流程，支持无限下钻嵌套。\n### 流程组成及说明\n![image-20240307105909685](flow.assets/image-20240307105909685.png)\n### 流程设计介绍\n流程设计的目的是将各操作按预定的执行顺序、执行条件连接在一起，编辑完成后提交给流程视图和任务配置，以实现批量操作自动化。\n一个完整的流程，必须具有”开始“和”结束“节点作为流程的固定节点，其他节点为实现机器人流程自动化功能性的节点。\n在进行流程图的设计时，可将流程设计为单分支流程或多分支流程。\n### 流程创建\n1. 进入【流程设计】页面\n   在界面左边菜单栏，单击“流程管理”，在页面中单击“流程设计”，即可进入【流程设计】界面。\n   ![image-20240307110513373](flow.assets/image-20240307110513373.png)\n2. 增加流程分组\n   在【流程设计】界面，单击“增加”-“文件夹”，增加流程分组。\n   ![image-20240307110810775](flow.assets/image-20240307110810775.png)\n3. 增加流程\n   选中一个分组，单击“增加”-“流程图”，增加流程。在“增加流程”弹框中，一般只需要填写“流程名称”即可，若需要将新增流程关联到运营管理平台，才需填写其他属性。\n   ![image-20240307111005550](flow.assets/image-20240307111005550.png)\n   ![image-20240416155227638](flow.assets/image-20240416155227638.png)"
  },
  {
    "text": "# 应用案例\n本章节将介绍如何使用中文脚本编写一个具体的应用案例：\n- [前期准备](#前期准备)\n- [案例编写](#案例编写)\n## 前期准备\n本应用案例需要使用到基础库函数里 Selenium 分组下的函数，使用此套函数前需完成一些前期准备操作，具体包括以下几个步骤：\n1. 下载浏览器驱动。\n   >**[info]  说明**\n   >\n   >&emsp;本小节以 Chrome 浏览器为例，其他浏览器操作类似。\n   - 查看浏览器版本号。\n     进入 Chrome 浏览器界面设置页面后，在左侧菜单栏单击 “关于Chrome ” 选项，查看当前 Chrome 浏览器的版本号。\n     ![image-20230713143016000](case.assets/image-20230713143016000.png)\n     ![image-20230713143304030](case.assets/image-20230713143304030.png)\n   - 下载浏览器驱动。\n     在官网：http://chromedriver.storage.googleapis.com/index.html 中找到与当前浏览器版本号相同的驱动并下载，下载后的 “chromedriver.exe” 文件需存放在 “chrome.exe” 文件同目录下。\n     > **[warning]  注意**\n     >\n     > &emsp;虽然当前系统是64位的 Windows 系统，但是建议下载32位的浏览器驱动，否则在后期运行中可能会出现错误，若是 Linux、mac 等系统则根据实际系统的位数进行下载即可。\n     ![image-20230713144319959](case.assets/image-20230713144319959.png)\n2. 配置环境变量。\n   将 “chromedriver.exe” 所在路径写入到系统环境变量的 “Path” 变量下。\n   >**[info]  说明**\n   >\n   >- 新建系统环境变量的方法步骤可参考如下网址：https://jingyan.baidu.com/article/358570f69e8a13ce4724fcf8.html 。\n   >- 由于环境变量发生改变，因此配置完成后需要重启控制台。\n   ![image-20230713194343327](case.assets/image-20230713194343327.png)\n3. 修改浏览器设置。\n   >**[info]  说明**\n   >\n   >&emsp;此步骤仅 IE 浏览器需要设置。\n   首先需将浏览器页面缩放设置为100%，接着勾选所有区域的保护模式，如下图所示。最后进行完 IE 配置后重启 IE 浏览器。\n   ![image-20230713151620356](case.assets/image-20230713151620356.png)\n## 案例编写\n### 应用案例：获取浏览器页面信息保存到 Pdf 文件\n本案例主要功能是获取浏览器页面信息，并将信息保存到 Pdf 文件内，可将过程分解成：打开浏览器网页->获取页面元素->获取页面文本信息->写入 Pdf 文件内并保存。\n具体中文脚本内容编写过程如下：\n1. 打开浏览器网页。\n   使用`se启动Chrome驱动()`函数和`seNewSession()`函数分别启动浏览器驱动和建立浏览器会话，接着调用`seGoToUrl()`函数可打开指定浏览器网页。\n   ![image-20230713180627094](case.assets/image-20230713180627094.png)\n   ![image-20230713171528965](case.assets/image-20230713171528965.png)\n2. 获取页面元素。\n   使用`seFindElementByClassName()`函数来获取页面元素，其中函数里 “ClassName” 参数的获取通过在浏览器页面单击鼠标右键，单击【检查】项后，在右侧代码上即可查找到。\n   ![image-20230713173105031](case.assets/image-20230713173105031.png)\n   ![image-20230713173230033](case.assets/image-20230713173230033.png)\n3. 获取页面文本信息。\n   使用`seGetElementText()`函数可获取页面中元素的文本信息，并且将文本信息返回到 sText 变量中。\n   ![image-20230713173550284](case.assets/image-20230713173550284.png)\n   ![image-20230713173856800](case.assets/image-20230713173856800.png)\n4. 写入 Pdf 文件内并保存。\n   使用`编写pdf内容()`函数将上一步获取的页面文本信息写入到 Pdf 文件中，并保存到指定路径。\n   ![image-20230713180424860](case.assets/image-20230713180424860.png)\n5. 运行中文脚本组件成功后，在指定路径下可看到写入的 Pdf 文件及文件内从浏览器中获取的文本信息。\n   ![image-20230713192940644](case.assets/image-20230713192940644.png)\n   ![image-20230713193008806](case.assets/image-20230713193008806.png)\n6. 完整的中文脚本例子如下所示。\n   ```\n   {$I 输入模板.run}\n   应用案例(sUrl, pdf保存路径)   //填写入参名称\n   {$I 帮助信息.run}\n   {$I 参数定义.run}\n   sUrl:字符串\n   pdf保存路径:字符串       //定义参数类型\n   {$I 返回定义.run}\n   返回:字符串\n   {$I 函数主体.run}\n   //启动谷歌浏览器驱动\n   信息 = se启动Chrome驱动()\n   //建立浏览器会话并获取会话ID\n   信息 = seNewSession(sSessionID)\n   if (信息 <> '')\n   [\n     返回 = 设置指标('严重', '建立浏览器会话失败', '')\n     Trace(返回)\n     exit\n   ]  else\n   [\n     返回 = 设置指标('正常', '建立浏览器会话成功', '')\n     Trace(返回)\n     Trace(sSessionID)\n   ] \n   //打开指定网页\n   信息1 = seGoToUrl(sSessionID, sUrl)\n   if (信息1 <> '')\n   [\n     返回 = 设置指标('严重', '打开网页失败', '')\n     Trace(返回)\n     Trace('错误信息：'+信息1)\n     exit\n   ] else\n   [\n     返回 = 设置指标('正常', '打开网页成功', '')\n     Trace(返回)\n   ]  \n   //获取页面元素\n   sleep(10000) \n   信息 = seFindElementByClassName(sSessionID, 'icontent', sElementID) //通过查找元素的sClassName，即Class=\"icontent\"属性定位查找页面的元素\n   if (信息 = '')\n   [\n     返回 = 设置指标('正常', '获取页面元素ID成功', '')\n     Trace(返回)\n     Trace(sElementID) //返回页面元素的ID\n   ] else\n   [\n     返回 = 设置指标('严重', '获取页面元素ID失败', '')\n     Trace(返回)\n     Trace(信息)  //返回错误信息\n     exit\n   ]\n   //获取页面的文本信息\n   信息 = seGetElementText(sSessionID, sElementID, sText)    \n   if (信息 = '')\n   [\n     返回 = 设置指标('正常', '获取页面文本信息成功', '')\n     Trace(返回)\n     Trace(sText) //返回元素文本信息\n   ] else\n   [\n     返回 = 设置指标('严重', '获取页面文本信息失败', '')\n     Trace(返回)\n     Trace(信息)  //返回错误信息\n     exit\n   ]\n   //写入Pdf文件内并保存\n   错误 = 编写pdf内容(pdf保存路径, sText)\n   if (错误 = '')\n   [\n     返回 = 设置指标('正常', '写入pdf内容并保存成功', '')\n     Trace(返回)\n   ] else\n   [\n     返回 = 设置指标('严重', '写入pdf内容并保存失败', '')\n     Trace(返回)\n   ]\n   返回 = 设置指标('正常', '组件运行成功', '')\n   Trace(返回)\n   {$I 调试开始.run}\n   调用组件('http://www.mnw.cn/news/china/2545438.html','D:\\应用案例.pdf')   //填写参数值\n   {$I 调试结束.run}\n   ```"
  },
  {
    "text": "# 引言\n## 编写目的\n本文档主要为进行中文脚本组件开发的用户而设计的编程指南，以便用户能够尽快熟悉并掌握中文脚本的开发。\n## 概述\n基于金智维自主研发的一套中文函数，用户可以用于实现中文脚本组件的开发。目前金智维已经封装了上千个中文函数，这些函数的出现，让用户更易于理解，降低了编程的难度，同时极大地提高了代码的可读性。 \n![1687178082042](objective.assets/1687178082042.png)"
  }
]